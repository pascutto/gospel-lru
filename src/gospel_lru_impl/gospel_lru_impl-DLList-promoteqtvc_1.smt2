;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; generated by SMT-LIB strings
;;; SMT-LIB2: integer arithmetic
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a ty)) (sort a (witness a))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-fun string () ty)

(declare-fun bool () ty)

(declare-fun match_bool (ty Bool uni uni) uni)

;; match_bool_sort
  (assert
  (forall ((a ty))
  (forall ((x Bool) (x1 uni) (x2 uni)) (sort a (match_bool a x x1 x2)))))

;; match_bool_True
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni)) (=> (sort a z) (= (match_bool a true z z1) z)))))

;; match_bool_False
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni))
  (=> (sort a z1) (= (match_bool a false z z1) z1)))))

(declare-fun index_bool (Bool) Int)

;; index_bool_True
  (assert (= (index_bool true) 0))

;; index_bool_False
  (assert (= (index_bool false) 1))

;; bool_inversion
  (assert (forall ((u Bool)) (or (= u true) (= u false))))

(declare-sort tuple0 0)

(declare-fun tuple01 () ty)

(declare-fun Tuple0 () tuple0)

;; tuple0_inversion
  (assert (forall ((u tuple0)) (= u Tuple0)))

;; CompatOrderMult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (=> (<= x y) (=> (<= 0 z) (<= (* x z) (* y z))))))

(declare-sort int63 0)

(declare-fun int631 () ty)

(declare-fun int63qtint (int63) Int)

;; int63'axiom
  (assert
  (forall ((i int63))
  (and (<= (- 4611686018427387904) (int63qtint i))
  (<= (int63qtint i) 4611686018427387903))))

(declare-fun in_bounds (Int) Bool)

;; in_bounds'def
  (assert
  (forall ((n Int))
  (= (in_bounds n)
  (and (<= (- 4611686018427387904) n) (<= n 4611686018427387903)))))

;; to_int_in_bounds
  (assert (forall ((n int63)) (in_bounds (int63qtint n))))

;; extensionality
  (assert
  (forall ((x int63) (y int63))
  (=> (= (int63qtint x) (int63qtint y)) (= x y))))

(declare-fun abs1 (Int) Int)

;; abs'def
  (assert
  (forall ((x Int)) (ite (<= 0 x) (= (abs1 x) x) (= (abs1 x) (- x)))))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(declare-fun max_int () int63)

;; max_int'def
  (assert (= (int63qtint max_int) 4611686018427387903))

(declare-fun min_int () int63)

;; min_int'def
  (assert (= (int63qtint min_int) (- 4611686018427387904)))

(declare-sort seq 1)

(declare-fun seq1 (ty) ty)

(declare-fun length (ty uni) Int)

;; length_nonnegative
  (assert (forall ((a ty)) (forall ((s uni)) (<= 0 (length a s)))))

(declare-fun get (ty uni Int) uni)

;; get_sort
  (assert
  (forall ((a ty)) (forall ((x uni) (x1 Int)) (sort a (get a x x1)))))

(declare-fun infix_eqeq (ty uni uni) Bool)

;; infix =='spec
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (and
  (= (infix_eqeq a s1 s2)
  (and (= (length a s1) (length a s2))
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (length a s1))) (= (get a s1 i) (get a s2 i))))))
  (=> (infix_eqeq a s1 s2) (= s1 s2))))))

(declare-fun infix_mngt (ty ty) ty)

(declare-fun infix_at (ty ty uni uni) uni)

;; infix @_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort b (infix_at b a x x1)))))

(declare-fun create (ty Int uni) uni)

;; create_sort
  (assert
  (forall ((a ty))
  (forall ((x Int) (x1 uni)) (sort (seq1 a) (create a x x1)))))

(declare-fun t2tb (Int) uni)

;; t2tb_sort
  (assert (forall ((x Int)) (sort int (t2tb x))))

(declare-fun tb2t (uni) Int)

;; BridgeL
  (assert (forall ((i Int)) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni)) (! (= (t2tb (tb2t j)) j) :pattern ((t2tb (tb2t j))) )))

;; create'spec
  (assert
  (forall ((a ty))
  (forall ((len Int) (f uni))
  (=> (<= 0 len)
  (and (= (length a (create a len f)) len)
  (forall ((i Int))
  (=> (and (<= 0 i) (< i len))
  (= (get a (create a len f) i) (infix_at a int f (t2tb i))))))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a ty)) (sort (seq1 a) (empty a))))

;; empty'def
  (assert (forall ((a ty)) (= (length a (empty a)) 0)))

(declare-fun set (ty uni Int uni) uni)

;; set_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 uni)) (sort (seq1 a) (set a x x1 x2)))))

(declare-fun result (ty uni Int uni) uni)

;; result_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 uni)) (sort (infix_mngt int a)
  (result a x x1 x2)))))

;; result'def
  (assert
  (forall ((a ty))
  (forall ((s uni) (i Int) (v uni) (j Int))
  (=> (sort a v)
  (= (infix_at a int (result a s i v) (t2tb j)) (ite (= j i) v (get a s j)))))))

;; set'def
  (assert
  (forall ((a ty))
  (forall ((s uni) (i Int) (v uni))
  (=> (and (<= 0 i) (< i (length a s)))
  (= (set a s i v) (create a (length a s) (result a s i v)))))))

;; set'spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (i Int) (v uni))
  (=> (sort a v)
  (=> (and (<= 0 i) (< i (length a s)))
  (and (= (length a (set a s i v)) (length a s))
  (and (= (get a (set a s i v) i) v)
  (forall ((j Int))
  (=> (and (and (<= 0 j) (< j (length a s))) (not (= j i)))
  (= (get a (set a s i v) j) (get a s j)))))))))))

(declare-fun mixfix_lblsmnrb (ty uni Int uni) uni)

;; mixfix [<-]_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 uni)) (sort (seq1 a)
  (mixfix_lblsmnrb a x x1 x2)))))

;; mixfix [<-]'def
  (assert
  (forall ((a ty))
  (forall ((s uni) (i Int) (v uni))
  (=> (and (<= 0 i) (< i (length a s)))
  (= (mixfix_lblsmnrb a s i v) (set a s i v))))))

(declare-fun singleton1 (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a ty)) (forall ((x uni)) (sort (seq1 a) (singleton1 a x)))))

(declare-fun result1 (ty uni) uni)

;; result_sort
  (assert
  (forall ((a ty))
  (forall ((x uni)) (sort (infix_mngt int a) (result1 a x)))))

;; result'def
  (assert
  (forall ((a ty))
  (forall ((v uni) (us Int))
  (=> (sort a v) (= (infix_at a int (result1 a v) (t2tb us)) v)))))

;; singleton'def
  (assert
  (forall ((a ty))
  (forall ((v uni)) (= (singleton1 a v) (create a 1 (result1 a v))))))

;; singleton'spec
  (assert
  (forall ((a ty))
  (forall ((v uni))
  (=> (sort a v)
  (and (= (length a (singleton1 a v)) 1) (= (get a (singleton1 a v) 0) v))))))

(declare-fun cons (ty uni uni) uni)

;; cons_sort
  (assert
  (forall ((a ty)) (forall ((x uni) (x1 uni)) (sort (seq1 a) (cons a x x1)))))

(declare-fun result2 (ty uni uni) uni)

;; result_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt int a) (result2 a x x1)))))

;; result'def
  (assert
  (forall ((a ty))
  (forall ((x uni) (s uni) (i Int))
  (=> (sort a x)
  (= (infix_at a int (result2 a x s) (t2tb i)) (ite (= i 0) x
                                               (get a s (- i 1))))))))

;; cons'def
  (assert
  (forall ((a ty))
  (forall ((x uni) (s uni))
  (= (cons a x s) (create a (+ 1 (length a s)) (result2 a x s))))))

;; cons'spec
  (assert
  (forall ((a ty))
  (forall ((x uni) (s uni))
  (=> (sort a x)
  (and (= (length a (cons a x s)) (+ 1 (length a s)))
  (and (= (get a (cons a x s) 0) x)
  (forall ((i Int))
  (=> (and (< 0 i) (<= i (length a s)))
  (= (get a (cons a x s) i) (get a s (- i 1)))))))))))

(declare-fun snoc (ty uni uni) uni)

;; snoc_sort
  (assert
  (forall ((a ty)) (forall ((x uni) (x1 uni)) (sort (seq1 a) (snoc a x x1)))))

(declare-fun result3 (ty uni uni) uni)

;; result_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt int a) (result3 a x x1)))))

;; result'def
  (assert
  (forall ((a ty))
  (forall ((s uni) (x uni) (i Int))
  (=> (sort a x)
  (= (infix_at a int (result3 a s x) (t2tb i)) (ite (= i (length a s)) x
                                               (get a s i)))))))

;; snoc'def
  (assert
  (forall ((a ty))
  (forall ((s uni) (x uni))
  (= (snoc a s x) (create a (+ 1 (length a s)) (result3 a s x))))))

;; snoc'spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (x uni))
  (=> (sort a x)
  (and (= (length a (snoc a s x)) (+ 1 (length a s)))
  (and (= (get a (snoc a s x) (length a s)) x)
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (length a s)))
  (= (get a (snoc a s x) i) (get a s i))))))))))

(declare-fun mixfix_lbdtdtrb (ty uni Int Int) uni)

;; mixfix [..]_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort (seq1 a)
  (mixfix_lbdtdtrb a x x1 x2)))))

(declare-fun result4 (ty uni Int) uni)

;; result_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int)) (sort (infix_mngt int a) (result4 a x x1)))))

;; result'def
  (assert
  (forall ((a ty))
  (forall ((s uni) (i Int) (k Int))
  (= (infix_at a int (result4 a s i) (t2tb k)) (get a s (+ i k))))))

;; mixfix [..]'def
  (assert
  (forall ((a ty))
  (forall ((s uni) (i Int) (j Int))
  (=> (and (<= 0 i) (and (<= i j) (<= j (length a s))))
  (= (mixfix_lbdtdtrb a s i j) (create a (- j i) (result4 a s i)))))))

;; mixfix [..]'spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (i Int) (j Int))
  (=> (and (<= 0 i) (and (<= i j) (<= j (length a s))))
  (and (= (length a (mixfix_lbdtdtrb a s i j)) (- j i))
  (forall ((k Int))
  (=> (and (<= 0 k) (< k (- j i)))
  (= (get a (mixfix_lbdtdtrb a s i j) k) (get a s (+ i k))))))))))

(declare-fun mixfix_lb_dtdtrb (ty uni Int) uni)

;; mixfix [_..]_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int)) (sort (seq1 a) (mixfix_lb_dtdtrb a x x1)))))

;; mixfix [_..]'def
  (assert
  (forall ((a ty))
  (forall ((s uni) (i Int))
  (=> (and (<= 0 i) (<= i (length a s)))
  (= (mixfix_lb_dtdtrb a s i) (mixfix_lbdtdtrb a s i (length a s)))))))

(declare-fun mixfix_lbdtdt_rb (ty uni Int) uni)

;; mixfix [.._]_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int)) (sort (seq1 a) (mixfix_lbdtdt_rb a x x1)))))

;; mixfix [.._]'def
  (assert
  (forall ((a ty))
  (forall ((s uni) (j Int))
  (=> (and (<= 0 j) (<= j (length a s)))
  (= (mixfix_lbdtdt_rb a s j) (mixfix_lbdtdtrb a s 0 j))))))

(declare-fun infix_plpl (ty uni uni) uni)

;; infix ++_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (seq1 a) (infix_plpl a x x1)))))

(declare-fun result5 (ty uni uni Int) uni)

;; result_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni) (x2 Int)) (sort (infix_mngt int a)
  (result5 a x x1 x2)))))

;; result'def
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni) (l Int) (i Int))
  (= (infix_at a int (result5 a s1 s2 l) (t2tb i)) (ite (< i l) (get a s1 i)
                                                   (get a s2 (- i l)))))))

;; infix ++'def
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (let ((l (length a s1)))
  (= (infix_plpl a s1 s2) (create a (+ l (length a s2)) (result5 a s1 s2 l)))))))

;; infix ++'spec
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (and (= (length a (infix_plpl a s1 s2)) (+ (length a s1) (length a s2)))
  (and
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (length a s1)))
  (= (get a (infix_plpl a s1 s2) i) (get a s1 i))))
  (forall ((i Int))
  (=> (and (<= (length a s1) i) (< i (length a (infix_plpl a s1 s2))))
  (= (get a (infix_plpl a s1 s2) i) (get a s2 (- i (length a s1)))))))))))

(declare-sort array 1)

(declare-fun array1 (ty) ty)

(declare-fun elts (ty uni) uni)

;; elts_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort (seq1 a) (elts a x)))))

(declare-fun length1 (ty uni) int63)

;; array'invariant
  (assert
  (forall ((a ty))
  (forall ((self uni))
  (! (and (<= 0 (int63qtint (length1 a self)))
     (= (int63qtint (length1 a self)) (length a (elts a self)))) :pattern (
  (length1 a self)) :pattern ((elts a self)) ))))

(declare-fun option (ty) ty)

(declare-fun None (ty) uni)

;; None_sort
  (assert (forall ((a ty)) (sort (option a) (None a))))

(declare-fun Some (ty uni) uni)

;; Some_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort (option a) (Some a x)))))

(declare-fun match_option (ty ty uni uni uni) uni)

;; match_option_sort
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort a1 (match_option a1 a x x1 x2)))))

;; match_option_None
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((z uni) (z1 uni))
  (=> (sort a1 z) (= (match_option a1 a (None a) z z1) z)))))

;; match_option_Some
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((z uni) (z1 uni) (u uni))
  (=> (sort a1 z1) (= (match_option a1 a (Some a u) z z1) z1)))))

(declare-fun index_option (ty uni) Int)

;; index_option_None
  (assert (forall ((a ty)) (= (index_option a (None a)) 0)))

;; index_option_Some
  (assert
  (forall ((a ty))
  (forall ((u uni))
  (! (= (index_option a (Some a u)) 1) :pattern ((Some a u)) ))))

(declare-fun Some_proj_1 (ty uni) uni)

;; Some_proj_1_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort a (Some_proj_1 a x)))))

;; Some_proj_1'def
  (assert
  (forall ((a ty))
  (forall ((u uni)) (=> (sort a u) (= (Some_proj_1 a (Some a u)) u)))))

;; option_inversion
  (assert
  (forall ((a ty))
  (forall ((u uni))
  (=> (sort (option a) u)
  (or (= u (None a)) (= u (Some a (Some_proj_1 a u))))))))

(declare-fun is_none (ty uni) Bool)

;; is_none'def
  (assert
  (forall ((a ty))
  (and (is_none a (None a)) (forall ((x uni)) (not (is_none a (Some a x)))))))

;; is_none'spec
  (assert
  (forall ((a ty))
  (forall ((o uni))
  (=> (sort (option a) o) (= (is_none a o) (= o (None a)))))))

(declare-sort t 1)

(declare-fun t1 (ty) ty)

(declare-fun contents (ty uni) uni)

;; contents_sort
  (assert
  (forall ((a ty)) (forall ((x uni)) (sort (array1 a) (contents a x)))))

(declare-fun witness1 (ty uni) uni)

;; witness_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort a (witness1 a x)))))

(declare-fun prev (ty uni) (array int63))

(declare-fun next (ty uni) (array int63))

(declare-fun first (ty uni) int63)

(declare-fun last (ty uni) int63)

(declare-fun cap (ty uni) int63)

(declare-fun size (ty uni) int63)

(declare-fun occupied (ty uni) (array Bool))

(declare-fun age (ty uni) (Array int63 Int))

(declare-fun t2tb1 (Bool) uni)

;; t2tb_sort
  (assert (forall ((x Bool)) (sort bool (t2tb1 x))))

(declare-fun tb2t1 (uni) Bool)

;; BridgeL
  (assert
  (forall ((i Bool)) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort bool j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1 (tb2t1 j))) )))

(declare-fun t2tb2 ((seq Bool)) uni)

;; t2tb_sort
  (assert (forall ((x (seq Bool))) (sort (seq1 bool) (t2tb2 x))))

(declare-fun tb2t2 (uni) (seq Bool))

;; BridgeL
  (assert
  (forall ((i (seq Bool))) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb2 (tb2t2 j)) j) :pattern ((t2tb2 (tb2t2 j))) )))

(declare-fun t2tb3 ((array Bool)) uni)

;; t2tb_sort
  (assert (forall ((x (array Bool))) (sort (array1 bool) (t2tb3 x))))

(declare-fun tb2t3 (uni) (array Bool))

;; BridgeL
  (assert
  (forall ((i (array Bool)))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (array1 bool) j) (= (t2tb3 (tb2t3 j)) j)) :pattern ((t2tb3
                                                                   (tb2t3 j))) )))

(declare-fun t2tb4 (int63) uni)

;; t2tb_sort
  (assert (forall ((x int63)) (sort int631 (t2tb4 x))))

(declare-fun tb2t4 (uni) int63)

;; BridgeL
  (assert
  (forall ((i int63)) (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort int631 j) (= (t2tb4 (tb2t4 j)) j)) :pattern ((t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((seq int63)) uni)

;; t2tb_sort
  (assert (forall ((x (seq int63))) (sort (seq1 int631) (t2tb5 x))))

(declare-fun tb2t5 (uni) (seq int63))

;; BridgeL
  (assert
  (forall ((i (seq int63)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb5 (tb2t5 j)) j) :pattern ((t2tb5 (tb2t5 j))) )))

(declare-fun t2tb6 ((array int63)) uni)

;; t2tb_sort
  (assert (forall ((x (array int63))) (sort (array1 int631) (t2tb6 x))))

(declare-fun tb2t6 (uni) (array int63))

;; BridgeL
  (assert
  (forall ((i (array int63)))
  (! (= (tb2t6 (t2tb6 i)) i) :pattern ((t2tb6 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (array1 int631) j) (= (t2tb6 (tb2t6 j)) j)) :pattern (
  (t2tb6 (tb2t6 j))) )))

;; t'invariant
  (assert
  (forall ((a ty))
  (forall ((self uni))
  (! (and
     (and
     (= (length1 a (contents a self)) (length1 int631 (t2tb6 (prev a self))))
     (and
     (= (length1 int631 (t2tb6 (prev a self))) (length1 int631
                                               (t2tb6 (next a self))))
     (and
     (= (length1 int631 (t2tb6 (next a self))) (length1 bool
                                               (t2tb3 (occupied a self))))
     (= (length1 bool (t2tb3 (occupied a self))) (cap a self)))))
     (and (<= 2 (int63qtint (cap a self)))
     (and
     (and (<= 0 (int63qtint (size a self)))
     (<= (int63qtint (size a self)) (int63qtint (cap a self))))
     (and
     (=> (not (= (int63qtint (size a self)) 0))
     (and
     (and
     (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) (int63qtint
                                                                  (first a
                                                                  self)))
     (< (int63qtint (first a self)) (int63qtint (cap a self))))
     (and
     (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) (int63qtint
                                                                  (last a
                                                                  self)))
     (< (int63qtint (last a self)) (int63qtint (cap a self))))))
     (and
     (forall ((i Int))
     (=>
     (and (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) i)
     (< i (int63qtint (cap a self))))
     (= (tb2t1 (get bool (elts bool (t2tb3 (occupied a self))) i)) true)))
     (and
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (< i (- (int63qtint (cap a self)) (int63qtint (size a self)))))
     (= (tb2t1 (get bool (elts bool (t2tb3 (occupied a self))) i)) false)))
     (and
     (forall ((i Int))
     (=>
     (and (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) i)
     (< i (int63qtint (cap a self))))
     (=> (not (= i (int63qtint (last a self))))
     (and
     (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) (int63qtint
                                                                  (tb2t4
                                                                  (get 
                                                                  int631
                                                                  (elts
                                                                  int631
                                                                  (t2tb6
                                                                  (next a
                                                                  self))) i))))
     (< (int63qtint
        (tb2t4 (get int631 (elts int631 (t2tb6 (next a self))) i))) (int63qtint
                                                                    (cap a
                                                                    self)))))))
     (and
     (forall ((i Int))
     (=>
     (and (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) i)
     (< i (int63qtint (cap a self))))
     (=> (not (= i (int63qtint (first a self))))
     (and
     (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) (int63qtint
                                                                  (tb2t4
                                                                  (get 
                                                                  int631
                                                                  (elts
                                                                  int631
                                                                  (t2tb6
                                                                  (prev a
                                                                  self))) i))))
     (< (int63qtint
        (tb2t4 (get int631 (elts int631 (t2tb6 (prev a self))) i))) (int63qtint
                                                                    (cap a
                                                                    self)))))))
     (and
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (< i (- (int63qtint (cap a self)) (int63qtint (size a self)))))
     (= (get a (elts a (contents a self)) i) (witness1 a self))))
     (and
     (=> (not (= (int63qtint (size a self)) 0))
     (= (tb2t1
        (get bool (elts bool (t2tb3 (occupied a self)))
        (int63qtint (last a self)))) true))
     (and
     (=> (not (= (int63qtint (size a self)) 0))
     (= (tb2t1
        (get bool (elts bool (t2tb3 (occupied a self)))
        (int63qtint (first a self)))) true))
     (and
     (forall ((i Int))
     (=>
     (and (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) i)
     (< i (int63qtint (cap a self))))
     (=> (not (= i (int63qtint (first a self))))
     (= (int63qtint
        (tb2t4
        (get int631 (elts int631 (t2tb6 (next a self)))
        (int63qtint
        (tb2t4 (get int631 (elts int631 (t2tb6 (prev a self))) i)))))) i))))
     (and
     (forall ((i Int))
     (=>
     (and (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) i)
     (< i (int63qtint (cap a self))))
     (=> (not (= i (int63qtint (last a self))))
     (= (int63qtint
        (tb2t4
        (get int631 (elts int631 (t2tb6 (prev a self)))
        (int63qtint
        (tb2t4 (get int631 (elts int631 (t2tb6 (next a self))) i)))))) i))))
     (and
     (=>
     (and
     (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) (int63qtint
                                                                  (first a
                                                                  self)))
     (< (int63qtint (first a self)) (int63qtint (cap a self))))
     (= (select (age a self) (first a self)) 0))
     (and
     (=>
     (and
     (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) (int63qtint
                                                                  (first a
                                                                  self)))
     (< (int63qtint (first a self)) (int63qtint (cap a self))))
     (= (select (age a self) (last a self)) (- (int63qtint (size a self)) 1)))
     (and
     (forall ((i int63))
     (=>
     (and
     (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) (int63qtint
                                                                  i))
     (< (int63qtint i) (int63qtint (cap a self))))
     (and (<= 0 (select (age a self) i))
     (< (select (age a self) i) (int63qtint (size a self))))))
     (and
     (forall ((i int63))
     (=>
     (and
     (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) (int63qtint
                                                                  i))
     (< (int63qtint i) (int63qtint (cap a self))))
     (=> (not (= i (first a self)))
     (= (select (age a self) (tb2t4
                             (get int631 (elts int631 (t2tb6 (prev a self)))
                             (int63qtint i)))) (- (select (age a self) i) 1)))))
     (forall ((i int63))
     (=>
     (and
     (<= (- (int63qtint (cap a self)) (int63qtint (size a self))) (int63qtint
                                                                  i))
     (< (int63qtint i) (int63qtint (cap a self))))
     (=> (not (= i (last a self)))
     (= (select (age a self) (tb2t4
                             (get int631 (elts int631 (t2tb6 (next a self)))
                             (int63qtint i)))) (+ (select (age a self) i) 1)))))))))))))))))))))) :pattern (
  (age a self)) :pattern ((occupied a self)) :pattern ((size a self)) :pattern (
  (cap a self)) :pattern ((last a self)) :pattern ((first a self)) :pattern (
  (next a self)) :pattern ((prev a self)) :pattern ((witness1 a self)) :pattern (
  (contents a self)) ))))

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-fun t2 () (t a))

(declare-fun t_age () (Array int63 Int))

(declare-fun t_occupied () (array Bool))

(declare-fun t_size () int63)

(declare-fun t_cap () int63)

(declare-fun t_last () int63)

(declare-fun t_first () int63)

(declare-fun t_next () (array int63))

(declare-fun t_prev () (array int63))

(declare-fun t_witness () a)

(declare-fun t_contents () (array a))

(declare-fun i () int63)

(declare-fun t2tb7 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb7 x))))

(declare-fun tb2t7 (uni) a)

;; BridgeL
  (assert
  (forall ((i1 a)) (! (= (tb2t7 (t2tb7 i1)) i1) :pattern ((t2tb7 i1)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb7 (tb2t7 j)) j)) :pattern ((t2tb7 (tb2t7 j))) )))

(declare-fun t2tb8 ((array a)) uni)

;; t2tb_sort
  (assert (forall ((x (array a))) (sort (array1 a1) (t2tb8 x))))

(declare-fun tb2t8 (uni) (array a))

;; BridgeL
  (assert
  (forall ((i1 (array a)))
  (! (= (tb2t8 (t2tb8 i1)) i1) :pattern ((t2tb8 i1)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (array1 a1) j) (= (t2tb8 (tb2t8 j)) j)) :pattern ((t2tb8
                                                                 (tb2t8 j))) )))

(declare-fun t2tb9 ((t a)) uni)

;; t2tb_sort
  (assert (forall ((x (t a))) (sort (t1 a1) (t2tb9 x))))

(declare-fun tb2t9 (uni) (t a))

;; BridgeL
  (assert
  (forall ((i1 (t a))) (! (= (tb2t9 (t2tb9 i1)) i1) :pattern ((t2tb9 i1)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (t1 a1) j) (= (t2tb9 (tb2t9 j)) j)) :pattern ((t2tb9
                                                             (tb2t9 j))) )))

;; H
  (assert
  (and (= t_age (age a1 (t2tb9 t2)))
  (and (= t_occupied (occupied a1 (t2tb9 t2)))
  (and (= t_size (size a1 (t2tb9 t2)))
  (and (= t_cap (cap a1 (t2tb9 t2)))
  (and (= t_last (last a1 (t2tb9 t2)))
  (and (= t_first (first a1 (t2tb9 t2)))
  (and (= t_next (next a1 (t2tb9 t2)))
  (and (= t_prev (prev a1 (t2tb9 t2)))
  (and (= t_witness (tb2t7 (witness1 a1 (t2tb9 t2))))
  (= t_contents (tb2t8 (contents a1 (t2tb9 t2))))))))))))))

;; H
  (assert
  (<= (- (int63qtint (cap a1 (t2tb9 t2))) (int63qtint (size a1 (t2tb9 t2)))) 
  (int63qtint i)))

;; H
  (assert (< (int63qtint i) (int63qtint (cap a1 (t2tb9 t2)))))

(declare-fun o () Bool)

;; Ensures
  (assert
  (=> (= (int63qtint i) (int63qtint (first a1 (t2tb9 t2)))) (= o true)))

;; Ensures
  (assert (=> (= o true) (= i (first a1 (t2tb9 t2)))))

;; H
  (assert (not (= o true)))

(declare-fun o1 () Bool)

;; Ensures
  (assert
  (=> (= (int63qtint i) (int63qtint (last a1 (t2tb9 t2)))) (= o1 true)))

;; Ensures
  (assert (=> (= o1 true) (= i (last a1 (t2tb9 t2)))))

;; H
  (assert (not (= o1 true)))

(declare-fun t_next1 () (array int63))

;; H
  (assert
  (= (length1 int631 (t2tb6 t_next1)) (length1 int631
                                      (t2tb6 (next a1 (t2tb9 t2))))))

;; H
  (assert
  (= (length1 int631 (t2tb6 t_next1)) (length1 int631
                                      (t2tb6 (next a1 (t2tb9 t2))))))

;; Ensures
  (assert
  (= (tb2t5 (elts int631 (t2tb6 t_next1))) (tb2t5
                                           (mixfix_lblsmnrb int631
                                           (elts int631
                                           (t2tb6 (next a1 (t2tb9 t2))))
                                           (int63qtint
                                           (tb2t4
                                           (get int631
                                           (elts int631
                                           (t2tb6 (prev a1 (t2tb9 t2))))
                                           (int63qtint i))))
                                           (get int631
                                           (elts int631
                                           (t2tb6 (next a1 (t2tb9 t2))))
                                           (int63qtint i))))))

(declare-fun t_prev1 () (array int63))

;; H
  (assert
  (= (length1 int631 (t2tb6 t_prev1)) (length1 int631
                                      (t2tb6 (prev a1 (t2tb9 t2))))))

;; H
  (assert
  (= (length1 int631 (t2tb6 t_prev1)) (length1 int631
                                      (t2tb6 (prev a1 (t2tb9 t2))))))

;; Ensures
  (assert
  (= (tb2t5 (elts int631 (t2tb6 t_prev1))) (tb2t5
                                           (mixfix_lblsmnrb int631
                                           (elts int631
                                           (t2tb6 (prev a1 (t2tb9 t2))))
                                           (int63qtint
                                           (tb2t4
                                           (get int631
                                           (elts int631
                                           (t2tb6 (next a1 (t2tb9 t2))))
                                           (int63qtint i))))
                                           (get int631
                                           (elts int631
                                           (t2tb6 (prev a1 (t2tb9 t2))))
                                           (int63qtint i))))))

(declare-fun t_prev2 () (array int63))

;; H
  (assert
  (= (length1 int631 (t2tb6 t_prev2)) (length1 int631 (t2tb6 t_prev1))))

;; H
  (assert
  (= (length1 int631 (t2tb6 t_prev2)) (length1 int631 (t2tb6 t_prev1))))

;; Ensures
  (assert
  (= (tb2t5 (elts int631 (t2tb6 t_prev2))) (tb2t5
                                           (mixfix_lblsmnrb int631
                                           (elts int631 (t2tb6 t_prev1))
                                           (int63qtint (first a1 (t2tb9 t2)))
                                           (t2tb4 i)))))

(declare-fun t_next2 () (array int63))

;; H
  (assert
  (= (length1 int631 (t2tb6 t_next2)) (length1 int631 (t2tb6 t_next1))))

;; H
  (assert
  (= (length1 int631 (t2tb6 t_next2)) (length1 int631 (t2tb6 t_next1))))

;; Ensures
  (assert
  (= (tb2t5 (elts int631 (t2tb6 t_next2))) (tb2t5
                                           (mixfix_lblsmnrb int631
                                           (elts int631 (t2tb6 t_next1))
                                           (int63qtint i)
                                           (t2tb4 (first a1 (t2tb9 t2)))))))

;; Assert
  (assert
  (= (tb2t4
     (get int631 (elts int631 (t2tb6 t_prev2))
     (int63qtint
     (tb2t4 (get int631 (elts int631 (t2tb6 t_next2)) (int63qtint i)))))) 
  i))

;; Assert
  (assert
  (forall ((i1 int63))
  (=>
  (and
  (<= (- (int63qtint (cap a1 (t2tb9 t2))) (int63qtint (size a1 (t2tb9 t2)))) 
  (int63qtint i1)) (< (int63qtint i1) (int63qtint (cap a1 (t2tb9 t2)))))
  (<= 0 (select (age a1 (t2tb9 t2)) i1)))))

(declare-fun t3 () (t a))

(declare-fun t_age1 () (Array int63 Int))

(declare-fun i1 () int63)

;; H
  (assert
  (<= (- (int63qtint (cap a1 (t2tb9 t2))) (int63qtint (size a1 (t2tb9 t2)))) 
  (int63qtint i1)))

;; H
  (assert (< (int63qtint i1) (int63qtint (cap a1 (t2tb9 t2)))))

(assert
;; promoteqtvc
 ;; File "/home/pascutto/p/gospel-lru/src/gospel_lru_impl.mlw", line 182, characters 6-13
  (not (<= 0 (select t_age1 i1))))
(check-sat)
